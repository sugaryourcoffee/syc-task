#!/usr/bin/env ruby
require 'gli'
require 'syctask'
include GLI::App
include Syctime

program_desc 'A simple task manager'

version Syctask::VERSION

desc 'The directory where tasks are saved to'
default_value File.expand_path('~/.tasks')
arg_name 'TASK_DIR'
flag [:t,:taskdir]

desc 'Project name where tasks are saved'
arg_name 'PROJECT'
flag [:p, :project]

desc 'Create a new task'
arg_name 'TASK_TITLE'
command :new do |c|
  c.desc 'Priority of the task, 1 highes priority'
  c.default_value 3
  c.arg_name 'PRIO'
  c.flag [:p, :prio], :type => Integer

  c.desc 'Follow-up date'
  c.arg_name 'FOLLOW-UP'
  c.flag [:f, :follow_up], :must_match => /\d{4}-\d{2}-\d{2}/
  
  c.desc 'Due date'
  c.arg_name 'DUE'
  c.flag [:d, :due_date], :must_match => /\d{4}-\d{2}-\d{2}/

  c.desc 'Description of the task'
  c.arg_name 'DESCRIPTION'
  c.flag :description

  c.desc 'Note on progress of the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.desc 'Tags that describe the task'
  c.arg_name 'TAG1,TAG2,TAG3'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*/

  c.action do |global_options,options,args|
    filter = [:tags, :description, :prio, :due_date, :follow_up, 
              :note]
    options.keep_if {|key, value| filter.find_index(key)}
    if args.empty?
      STDOUT.puts "Reading new tasks from STDIN now... (end with CTRL-D)"
      args = STDIN.readlines.map {|t| t.chomp}
    end
    task_numbers = nil
    args.each do |title|
      task_number = @service.create(global_options[:t], options, title)
      if task_numbers.nil? 
        task_numbers = task_number.to_s 
      else 
        task_numbers += ", #{task_number}"
      end
    end
    if args.empty?
      puts
      help_now! "You have to provide at least a title to create a task"
    else
      STDOUT.puts sprintf("%s %s", "--> created tasks with task numbers",
                          " #{task_numbers}").color(:green)
    end
  end
end

desc 'Extract tasks from a file'
arg_name 'TASK_FILE'
command :scan do |c|
  c.action do |global_options,options,args|
    puts "scan command not implemented yet"
  end
end

desc 'Delete tasks from task list or from task plan'
command :delete do |c|
  c.desc 'Remove tasks from task plan of today, tomorrow or another date'
  c.arg_name 'DATE'
  c.flag :plan, :must_match => /today|tomorrow|\d{4}-\d{2}-\d{2}/

  c.desc 'IDs of the tasks to remove'
  c.arg_name 'ID1,ID2,..,IDn'
  c.flag [:i, :id], :must_match => /^\d+(?:,\d+)*|\d+/ 

  c.action do |global_options,options,args|
    help_now! "You must provide tasks ids to delete" unless options[:id]
    plan = options[:plan]
    filter = [:id]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}
    if plan
      case plan
      when 'today'
        date = Time.now.strftime("%Y-%m-%d")
      when 'tomorrow'
        date = (Time.now + (60*60*24)).strftime("%Y-%m-%d")
      else
        if plan.match(/\d{4}-\d{2}-\d{2}/)
          date = plan
        elsif nil
          date = Time.now.strftime("%Y-%m-%d")
        else
          help_now! "Arguments may be TODAY, TOMORROW, YYYY-MM-DD or <RETURN>"
        end
      end
      count = @planner.remove_tasks(date, options)
      STDOUT.puts sprintf("--> removed %d tasks from task plan of %s", 
                          count, date).color(:green)
    else
      count = @service.delete(global_options[:t], options) 
      STDOUT.puts sprintf("--> removed %d tasks from %s", 
                          count, global_options[:t]).color(:green)
     end    
  end
end

desc 'List tasks'
command :list do |c|

  c.desc 'List all tasks done and open'
  c.switch [:a, :all]
  
  c.desc 'Print complete task'
  c.switch [:c, :complete]

  c.desc 'Filter for ID'
  c.arg_name 'ID1,ID2,ID3|[<|=|>]ID'
  c.flag [:i, :id], :must_match => /^\d+(?:,\d+)*|^[<|=|>]\d+/ 

  c.desc 'REGEXP as filter for title'
  c.arg_name 'REGEXP'
  c.flag [:title]

  c.desc 'Filter for priority'
  c.arg_name '[<|=|>]PRIO'
  c.flag [:p, :prio], :must_match => /^\d+|^[<|=|>]\d+/

  c.desc 'Filter for follow-up date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:f, :follow_up], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/
  
  c.desc 'Filter for due date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:d, :due_date], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/

  c.desc 'REGEXP as filter for description'
  c.arg_name 'REGEXP'
  c.flag :description

  c.desc 'REGEXP as filter for note'
  c.arg_name 'REGEXP'
  c.flag [:n, :note]

  c.desc 'Tags or REGEXP as filter for tags'
  c.arg_name 'TAG1,TAG2,TAG3|REGEXP'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*|\/.*\//

  c.action do |global_options,options,args|
    filter = [:id, :tags, :description, :prio, :due_date, :follow_up, 
              :note, :title]
    all = options[:all]
    complete = options[:complete]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}
    count = 0
    @service.find(global_options[:t], options, all).each do |task|
      task.print_pretty(complete)
      count += 1
    end      
    STDOUT.puts sprintf("--> found %d tasks", count).color(:green)
  end
end

desc 'Show planned tasks'
arg_name 'DATE'
command :showplan do |c|

  c.desc 'Print complete task'
  c.switch [:c, :complete]

  c.action do |global_options,options,args|
    case args[0]
    when 'today'
      date = Time.now.strftime("%Y-%m-%d")
    when 'tomorrow'
      date = (Time.now + (60 * 60 * 24)).strftime("%Y-%m-%d")
    else
      if args[0] and args[0].match(/\d{4}-\d{2}-\d{2}/)
        date = args[0] 
      elsif args[0].nil?
        date = Time.now.strftime("%Y-%m-%d")
      end
    end
    count = 0
    @planner.get_tasks(date).each do |task|
      task.print_pretty(options[:complete])
      count += 1
    end
    STDOUT.puts sprintf("--> planned %d tasks for %s", count, date).
                        color(:green)
  end

end

desc 'Plan or show planned tasks for today, tomorrow or another day'
arg_name 'DATE'
command :plan do |c|
  
  c.desc 'Show planned tasks'
  c.arg_name 'show'
  c.switch :show

  c.desc 'Show complete tasks'
  c.arg_name 'complete'
  c.switch [:c, :complete]

  c.desc 'Move planned task to another day'
  c.arg_name 'move'
  c.flag [:m, :move], :must_match => /today|tomorrow|\d{4}-\d{2}-\d{2}/

  c.desc 'Filter for ID'
  c.arg_name 'ID1,ID2,ID3|[<|=|>]ID'
  c.flag [:i, :id], :must_match => /^\d+(?:,\d+)*|^[<|=|>]\d+/ 

  c.desc 'REGEXP as filter for title'
  c.arg_name 'REGEXP'
  c.flag [:title]

  c.desc 'Filter for priority'
  c.arg_name '[<|=|>]PRIO'
  c.flag [:p, :prio], :must_match => /^\d+|^[<|=|>]\d+/

  c.desc 'Filter for follow-up date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:f, :follow_up], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/
  
  c.desc 'Filter for due date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:d, :due_date], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/

  c.desc 'REGEXP as filter for description'
  c.arg_name 'REGEXP'
  c.flag :description

  c.desc 'REGEXP as filter for note'
  c.arg_name 'REGEXP'
  c.flag [:n, :note]

  c.desc 'Tags or REGEXP as filter for tags'
  c.arg_name 'TAG1,TAG2,TAG3|REGEXP'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*|\/.*\//
 
  c.action do |global_options,options,args|
    ARGV.clear

    # Any option that is no filter has to be captured before filter is created
    show = options[:show]
    complete = options[:complete]
    to_date = extract_time(options[:move]) if options[:move]

    filter = [:id, :tags, :description, :prio, :due_date, :follow_up, 
              :note, :title]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}
    args[0] = 'today' if args[0].nil?
    case args[0]
    when 'today'
      date = Time.now.strftime("%Y-%m-%d")
    when 'tomorrow'
      date = (Time.now + (60 * 60 * 24)).strftime("%Y-%m-%d")
    else
      if args[0].match(/\d{4}-\d{2}-\d{2}/)
        date = args[0] 
      elsif nil
        date = Time.now.strftime("%Y-%m-%d")
      else
        help_now! "Arguments may be 'today', 'tomorrow', YYYY-MM-DD or <RETURN>"
      end
    end
    if show
      count = 0
      @planner.get_tasks(date, options).each do |task|
        task.print_pretty(complete)
        count += 1
      end
      STDOUT.puts sprintf("--> found %d planned task(s) for %s", count, date).
                         color(:green)
    elsif to_date
      count = @planner.move_tasks(options, date, to_date)
      STDOUT.puts sprintf("--> %d task(s) moved", count).color(:green)
    else
      count = @planner.plan_tasks(@service.find(global_options[:t], options, 
                                                false), date)
      STDOUT.puts sprintf("--> %d task(s) planned", count).color(:green)
    end
  end
end

desc 'Create schedule for planned tasks'
command :schedule do |c|

  c.desc 'Work time'
  c.arg_name 'HH:MM-HH:MM'
  c.flag [:w, :work] 

  c.desc 'Busy time'
  c.arg_name 'HH:MM-HH:MM,...'
  c.flag [:b, :busy] 

  c.desc 'Meeting Titles'
  c.arg_name 'TITLE,...'
  c.flag [:m, :meeting]

  c.desc 'Assign tasks to a meeting'
  c.arg_name 'MEETING:TASK#1,...'
  c.flag [:a, :assign]

  c.desc 'Show schedule'
  c.switch :show

  c.action do |global_options,options,args|
    
    scheduler = Syctask::TaskScheduler.new

    if options[:work].nil?
      help_now! "No work time set" unless scheduler.restore(:work_time)
    elsif options[:work].scan(Syctask::TaskScheduler::WORK_TIME_PATTERN).nil?
      help_now! "Work time has to be in yyyy-mm-dd" 
    else
      scheduler.set_work_time(options[:work])
    end

    if options[:busy].nil?
      scheduler.set_busy_times("") unless scheduler.restore(:busy_time)
    elsif options[:busy].scan(Syctask::TaskScheduler::BUSY_TIME_PATTERN).nil?
      help_now! "Busy time has to be in yyyy-mm-dd"
    else
      scheduler.set_busy_times(options[:busy])
    end

    if options[:meeting].nil?
      scheduler.set_meeting_titles("") unless scheduler.restore(:meetings)
    elsif options[:meeting].split(',').empty?
      help_now! "Meeting titles have to be in 'Title1,Title2,...'"
    else
      scheduler.set_meeting_titles(options[:meeting])
    end

    scheduler.set_tasks(@planner.get_tasks)

    if options[:assign].nil?
      scheduler.restore(:assignments)
    elsif options[:assign].scan(Syctask::TaskScheduler::ASSIGNMENT_PATTERN).nil?
      help_now! "Task assignments to meetings have to be in 'A:1,2,3;B:1;...'"
    else
      scheduler.set_task_assignments(options[:assign])
    end

    scheduler.show
    
  end
end

desc 'Prioritize tasks of today, tomorrow or another day'
arg_name 'DATE'
default_value 'today'
command :prio do |c|
  c.action do |global_options,options,args|
    time = extract_time(args[0])
    planner = Syctask::TaskPlanner.new
    planner.prioritize_tasks(time)
  end
end

desc 'Start tracking a task'
arg_name 'TASK_NUMBER|PLAN|TALK|PHONE|EMAIL'
command :start do |c|

  c.desc 'List currently tracked task'
  c.switch [:l, :list] 
 
  c.desc 'Number of planned task'
  c.switch [:p, :plan]

  c.action do |global_options,options,args|
    tracker = Syctask::TaskTracker.new
    if args[0]
      if options[:plan]
        task = @planner.get_tasks[args[0].to_i] 
      else
        task = @service.read(global_options[:taskdir], args[0])
      end
      help_now! sprintf("%s", 
                        "no task with id #{args[0]}").color(:red) unless task
      started, stopped = tracker.start(task)
      if started
        puts sprintf("--> tracking %s", 
                     "#{task.id} - #{task.title}").color(:green)
      else
        puts sprintf("--> allready tracking %s", 
                     "#{task.id} - #{task.title}").color(:red)
      end
      if stopped
        puts sprintf("--> stopped %s",
                     "#{stopped.id} - #{stopped.title}").color(:green)
        puts sprintf("    %s", "#{string_for_seconds(stopped.lead_time)}").color(:green)
      end
    end
    if options[:list]
      task = tracker.tracked_task
      puts sprintf("%s", "--> no task tracked").color(:red) unless task
      puts sprintf("%s", "--> #{task.id} - #{task.title}").color(:green) if task
    end
  end
end

desc 'Stop the tracked task'
command :stop do |c|
  c.action do |global_options,options,args|
    tracker = Syctask::TaskTracker.new
    task = tracker.stop
    if task
      puts sprintf("--> stopped %s", "#{task.id} - #{task.title}").color(:green)
      puts sprintf("    %4s", "#{string_for_seconds(task.lead_time)}").color(:green)
     else
      puts sprintf("--> %s", "no task tracked").color(:red)
    end
  end
end

desc 'Update the task'
arg_name 'TASK_NUMBER'
command :update do |c|
  c.desc 'Priority of the task, 1 highes priority'
  c.arg_name 'PRIO'
  c.flag [:p, :prio], :type => Integer

  c.desc 'Follow-up date'
  c.arg_name 'FOLLOW-UP'
  c.flag [:f, :follow_up], :must_match => /\d{4}-\d{2}-\d{2}/
  
  c.desc 'Due date'
  c.arg_name 'DUE'
  c.flag [:d, :due_date], :must_match => /\d{4}-\d{2}-\d{2}/

  c.desc 'Description of the task'
  c.arg_name 'DESCRIPTION'
  c.flag :description

  c.desc 'Note on progress of the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.desc 'Tags that describe the task'
  c.arg_name 'TAG1,TAG2,TAG3'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*/

  c.action do |global_options,options,args|
    help_now! "TASK_NUMBER required" if args.empty?
    filter = [:tags, :description, :prio, :due_date, :follow_up, 
              :note]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}

    success = @service.update(global_options[:t], args[0], options) 
    STDOUT.puts sprintf("sucessfully updated task with TASK_NUMBER ", 
                        args[0]).color(:green) if success
    STDOUT.puts sprintf("could not update task with TASK_NUMBER ", 
                        args[0]).color(:red) unless success
  end
end

desc 'Mark task as done'
arg_name 'TASK_NUMBER'
command :done do |c|
  c.desc 'Print task after marked as done'
  c.switch [:p, :print]
  c.desc 'Print complete task'
  c.switch [:c, :complete]

  c.desc 'Final note for the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.action do |global_options,options,args|
    help_now! sprintf("%s", 
                      'TASK_NUMBER is required').color(:red) if args.empty?
    task = @service.read(global_options[:t], args[0])
    exit_now!("Task with TASK_NUMBER #{args[0]} does not exist") unless task
    task.done(options[:note])
    @service.save(global_options[:t], task)
    STDOUT.puts sprintf("Marked task with TASK_NUMBER %d as done", args[0]).color(:green)
    task.print_pretty(options[:c]) if options[:p] 
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  @service = Syctask::TaskService.new
  @planner = Syctask::TaskPlanner.new

  dir = File.expand_path(global[:t])
  dir += "/" + global[:p] if global[:p]
  global[:taskdir] = global[:t] = dir.squeeze("/")
  
 
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

# Extracts the time out of a time string. Accepts 'today', 'tomorrow' or a date
# in the form 'YYYY-MM-DD'. Returns the date contained in the time_string
def extract_time(time_string)
  time_string = 'today' if time_string.nil?
  case time_string.downcase
  when 'today'
    date = Time.now.strftime("%Y-%m-%d")
  when 'tomorrow'
    date = (Time.now + (60 * 60 * 24)).strftime("%Y-%m-%d")
  else
    if time_string.match(/\d{4}-\d{2}-\d{2}/)
      date = time_string 
    elsif nil
      date = Time.now.strftime("%Y-%m-%d")
    else
      help_now! "Arguments may be 'today', 'tomorrow', YYYY-MM-DD or <RETURN>"
    end
  end
end

exit run(ARGV)
