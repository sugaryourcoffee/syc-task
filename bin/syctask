#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'syctask'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/syctask` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/syctask now"
  exit 64
end

include GLI::App

program_desc 'A simple task manager'

version Syctask::VERSION

desc 'The directory where tasks are saved to'
default_value File.expand_path('~/.tasks')
arg_name 'TASK_DIR'
flag [:t,:taskdir]

desc 'Project name where tasks are saved'
arg_name 'PROJECT'
flag [:p, :project]

desc 'Create a new task'
arg_name 'TASK_TITLE'
command :new do |c|
  c.desc 'Priority of the task, 1 highes priority'
  c.default_value 3
  c.arg_name 'PRIO'
  c.flag [:p, :prio], :type => Integer

  c.desc 'Follow-up date'
  c.arg_name 'FOLLOW-UP'
  c.flag [:f, :follow_up], :must_match => /\d{4}-\d{2}-\d{2}/
  
  c.desc 'Due date'
  c.arg_name 'DUE'
  c.flag [:d, :due_date], :must_match => /\d{4}-\d{2}-\d{2}/

  c.desc 'Description of the task'
  c.arg_name 'DESCRIPTION'
  c.flag :description

  c.desc 'Note on progress of the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.desc 'Tags that describe the task'
  c.arg_name 'TAG1,TAG2,TAG3'
  c.flag [:t, :tags], :type => Array


  c.action do |global_options,options,args|
    #dir = File.expand_path(global_options[:t]) + "/"
    #dir += global_options[:p] if global_options[:p]
    #dir.squeeze("/")
    title = args[0]
    #service = Syctask::TaskService.new
    task_number = @service.create(global_options[:t], options, title)
    STDOUT.puts "--> created task with task number #{task_number}"
  end
end

desc 'Extract tasks from a file'
arg_name 'TASK_FILE'
command :scan do |c|
  c.action do |global_options,options,args|
    puts "scan command ran"
  end
end

desc 'List tasks'
command :list do |c|

  c.desc 'List all tasks done and open'
  c.switch [:a, :all]
  
  c.desc 'Print complete task'
  c.switch [:c, :complete]

  c.desc 'Filter for ID'
  c.arg_name 'ID1,ID2,ID3|[<|=|>]ID'
  c.flag [:i, :id], :must_match => /^\d+(?:,\d+)*|^[<|=|>]\d+/ 

  c.desc 'REGEXP as filter for title'
  c.arg_name 'REGEXP'
  c.flag [:title]

  c.desc 'Filter for priority'
  c.arg_name '[<|=|>]PRIO'
  c.flag [:p, :prio], :must_match => /^\d+|^[<|=|>]\d+/

  c.desc 'Filter for follow-up date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:f, :follow_up], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/
  
  c.desc 'Filter for due date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:d, :due_date], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/

  c.desc 'REGEXP as filter for description'
  c.arg_name 'REGEXP'
  c.flag :description

  c.desc 'REGEXP as filter for note'
  c.arg_name 'REGEXP'
  c.flag [:n, :note]

  c.desc 'Tags or REGEXP as filter for tags'
  c.arg_name 'TAG1,TAG2,TAG3|REGEXP'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*|\/.*\//

  c.action do |global_options,options,args|
    filter = [:id, :tags, :description, :prio, :due_date, :follow_up, 
              :note, :title]
    all = options[:all]
    complete = options[:complete]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}
    @service.find(global_options[:t], options).each do |task|
      task.print_pretty(complete)
    end      
    puts "list command ran"
  end
end

desc 'Plan tasks for today'
command :plan do |c|
  c.action do |global_options,options,args|
    puts "plan command ran"
  end
end

desc 'Prioritize tasks'
command :prio do |c|
  c.action do |global_options,options,args|
    puts "prio command ran"
  end
end

desc 'Start and time a task'
arg_name 'TASK_NUMBER'
command :start do |c|
  c.action do |global_options,options,args|
    puts "start command ran"
  end
end

desc 'Stop the running task'
command :stop do |c|
  c.action do |global_options,options,args|
    puts "stop command ran"
  end
end

desc 'Update the task'
arg_name 'TASK_NUMBER'
command :update do |c|
  c.action do |global_options,options,args|
    puts "update command ran"
  end
end

desc 'Mark task as done'
arg_name 'TASK_NUMBER'
command :done do |c|
  c.desc 'Print task after marked as done'
  c.switch [:p, :print]
  c.desc 'Print long form of task'
  c.switch [:l, :long]

  c.desc 'Final note for the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.action do |global_options,options,args|
    help_now!('TASK_NUMBER is required') if args.empty?
    task = @service.read(global_options[:t], args[0])
    exit_now!('Task with TASK_NUMBER #{args[0]} does not exist') unless task
    task.done(options[:n])
    @service.save(global_options[:t], task)
    STDOUT.puts "Marked task with TASK_NUMBER #{args[0]} as done"
    task.print_pretty(options[:l]) if options[:p] 
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  @service = Syctask::TaskService.new

  dir = File.expand_path(global[:t])
  dir += "/" + global[:p] if global[:p]
  global[:taskdir] = global[:t] = dir.squeeze("/")
  
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
