var search_data = {"index":{"searchIndex":["object","syctask","evaluator","task","taskservice","test","unit","testcase","testdefault","testevaluator","testtask","testtaskservice","compare()","compare_dates()","compare_numbers()","create()","done()","done?()","find()","includes?()","matches?()","matches?()","new()","print_csv()","print_pretty()","read()","save()","setup()","setup()","teardown()","test_the_truth()","update()","update()","update?()","gemfile","readme","rakefile","syctask"],"longSearchIndex":["object","syctask","syctask::evaluator","syctask::task","syctask::taskservice","test","test::unit","test::unit::testcase","testdefault","testevaluator","testtask","testtaskservice","syctask::evaluator#compare()","syctask::evaluator#compare_dates()","syctask::evaluator#compare_numbers()","syctask::taskservice#create()","syctask::task#done()","syctask::task#done?()","syctask::taskservice#find()","syctask::evaluator#includes?()","syctask::evaluator#matches?()","syctask::task#matches?()","syctask::task::new()","syctask::task#print_csv()","syctask::task#print_pretty()","syctask::taskservice#read()","syctask::taskservice#save()","testevaluator#setup()","testtaskservice#setup()","testtaskservice#teardown()","testdefault#test_the_truth()","syctask::task#update()","syctask::taskservice#update()","syctask::task#update?()","","","",""],"info":[["Object","","Object.html","",""],["Syctask","","Syctask.html","","<p>Syctask provides functions for managing tasks in a task list\n<p>Syctask provides functions for managing tasks …\n"],["Syctask::Evaluator","","Syctask/Evaluator.html","","<p>Evaluator provides different evaluatons for comparing numbers, dates and\nstrings. Also provides methods …\n"],["Syctask::Task","","Syctask/Task.html","","<p>A Task is the basic element of the task list and holds all information\nabout a task.\n"],["Syctask::TaskService","","Syctask/TaskService.html","","<p>Provides services to operate tasks as create, read, find, update and save\nTask objects\n"],["Test","","Test.html","",""],["Test::Unit","","Test/Unit.html","",""],["Test::Unit::TestCase","","Test/Unit/TestCase.html","","<p>Add test libraries you want to use here, e.g. mocha\n"],["TestDefault","","TestDefault.html","","<p>Dummy test\n"],["TestEvaluator","","TestEvaluator.html","","<p>Tests for the Evaluator class\n"],["TestTask","","TestTask.html","","<p>Tests for the Task\n"],["TestTaskService","","TestTaskService.html","","<p>Tests for the TaskService\n"],["compare","Syctask::Evaluator","Syctask/Evaluator.html#method-i-compare","(value, operands)","<p>Compares two values regarding &lt;|=|&gt;. Returns true if the comparisson\nsucceeds otherwise false. …\n"],["compare_dates","Syctask::Evaluator","Syctask/Evaluator.html#method-i-compare_dates","(value, pattern)","<p>Compares two dates regarding &lt;|=|&gt;. Returns true if the comparisson\nsucceeds otherwise false.  …\n"],["compare_numbers","Syctask::Evaluator","Syctask/Evaluator.html#method-i-compare_numbers","(value, pattern)","<p>Compares two numbers regarding &lt;|=|&gt;. Returns true if the comparisson\nsucceeds otherwise false. …\n"],["create","Syctask::TaskService","Syctask/TaskService.html#method-i-create","(dir, options, title)","<p>Creates a new task in the specified directory, with the specified options\nand the specified title. If …\n"],["done","Syctask::Task","Syctask/Task.html#method-i-done","(note=\"\")","<p>Marks the task as done. When done than the done date is set. Optionally a\nnote can be provided.\n"],["done?","Syctask::Task","Syctask/Task.html#method-i-done-3F","()","<p>Checks if this task is done. Returns true if done otherwise false\n"],["find","Syctask::TaskService","Syctask/TaskService.html#method-i-find","(dir, filter={}, all=true)","<p>Finds all tasks that match the given filter. The filter can be provided for\n:id, :title, :description, …\n"],["includes?","Syctask::Evaluator","Syctask/Evaluator.html#method-i-includes-3F","(value, pattern)","<p>Evaluates whether value is part of the provided csv pattern. Returns true\nif it evaluates to true otherwise …\n"],["matches?","Syctask::Evaluator","Syctask/Evaluator.html#method-i-matches-3F","(value, regex)","<p>Evaluates if value matches the provided regex. Returns true if a match is\nfound. If value or regex is …\n"],["matches?","Syctask::Task","Syctask/Task.html#method-i-matches-3F","(filter = {})","<p>Compares the provided elements in the filter with the correspondent\nelements in the task. When all comparissons …\n"],["new","Syctask::Task","Syctask/Task.html#method-c-new","(options={}, title, id)","<p>Creates a new task. If the options contain a note than the current date and\ntime is added.\n"],["print_csv","Syctask::Task","Syctask/Task.html#method-i-print_csv","()","<p>Prints the task as a CSV\n"],["print_pretty","Syctask::Task","Syctask/Task.html#method-i-print_pretty","(long=false)","<p>Prints the task in a formatted way eather all values when long is true or\nonly id, title, prio, follow-up …\n"],["read","Syctask::TaskService","Syctask/TaskService.html#method-i-read","(dir, id)","<p>Reads the task with given ID id located in given directory dir. If task\ndoes not exist nil is returned …\n"],["save","Syctask::TaskService","Syctask/TaskService.html#method-i-save","(dir, task)","<p>Saves the task to the task directory\n"],["setup","TestEvaluator","TestEvaluator.html#method-i-setup","()","<p>Creates the evaluator object before each shoulda\n"],["setup","TestTaskService","TestTaskService.html#method-i-setup","()","<p>Creates a TaskService object used in each shoulda\n"],["teardown","TestTaskService","TestTaskService.html#method-i-teardown","()","<p>Removes files and directories created by the tests\n"],["test_the_truth","TestDefault","TestDefault.html#method-i-test_the_truth","()","<p>Always passes the test\n"],["update","Syctask::Task","Syctask/Task.html#method-i-update","(options)","<p>Updates the task with new values. Except for note and tags which are\nsupplemented with the new values …\n"],["update","Syctask::TaskService","Syctask/TaskService.html#method-i-update","(dir, id, options)","<p>Updates the task with the given id in the given directory dir with the\nprovided options.  Options are …\n"],["update?","Syctask::Task","Syctask/Task.html#method-i-update-3F","()","<p>Checks whether this task has been updated. Returns true if updated\notherwise false\n"],["Gemfile","","Gemfile.html","","<p>source :rubygems gemspec\n"],["README","","README_rdoc.html","","<p>Simple task organizer\n<p>With syctask you can organize your tasks (inspired by David Bryant\nCopland’s book …\n"],["Rakefile","","Rakefile.html","","<p>require ‘rake/clean’ require ‘rubygems’ require ‘rubygems/package_task’\nrequire ‘rdoc/task’ require ‘cucumber’ …\n"],["syctask","","syctask_rdoc.html","","<p>syctask\n<p>Generate this with\n\n<pre>syctask rdoc</pre>\n"]]}}