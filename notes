i                       i-c
0     start 1     0      -0
1     stop  1     0      -1
2     start 2     1      -1
3     stop  2     1      -2
4     start 3     2      -2
5     stop  3     2      -3
6     stop  4     3      -3

c += 1 if i % 2 == 1

Determine the greates id assuming it is 20

Associate ids to task-files in a hash

ids = {"1" => [/home/user/.tasks/1.task,
               /home/user/.tasks/project/1.task,
               /home/user/1.task],
       "2" => [/home/user/.tasks/2.task,
               /home/user/2.task],
       ...}

Then re-index tasks that are not unique and associate the old id to the new
task-files

new_ids = {"1" => {"20" => /home/user/.tasks/project/1.task,
                   "21" => /home/user/1.task},
           "2" => {"22" => /home/user/2.task},
           ...}

Rework duration of tasks

When planning a task then the duration is set and remaining time is set to
the duration
When showing the schedule the task is added at or after the current time within the time line.
When task is started the remaining is used as the start of the count down timer
When task is stopped the lead time is subtracted from remaining
When task is restarted count down timer is started with the value of remaining
When showing schedule the task is added with the remaining time. If the 
remaining time is <= 0 than 15 minutes as the duration is shown if task is not
marked as done.
Done tasks are shown in the schedule's time line with their actual lead_time in the past. The time that is shown is the actual processing time
duration minus remaining. The minimum time shown is 15 minutes.

          10        20        30        40
0123456789012345678901234567890123456789012345678
|---|---|---|---|---|---|---|---|---|---|---|---|
8   9  10  11  12  13  14  15  16  17  18  19  20

current time   position  diff   positon calculation              result
 9:00           4        [ 1,   0] (( 1 * 60 +  0) / 15.0).round   4 
 9:10           5        [ 1,  10] (( 1 * 60 + 10) / 15.0).round   5
10:00           8        [ 2,   0] (( 2 * 60 +  0) / 15.0).round   8
11:07          12        [ 3,   7] (( 3 * 60 +  7) / 15.0).round  12

 7:00           0        [-1,   0] ((-1 * 60 +  0) / 15.0).round  -4
 7:30           0        [ 0, -30] (( 0 * 60 - 30) / 15.0).round  -2

Define settings
Define default tasks
settings --general_tasks plan,talk,meet,break
general_tasks file
plan,1
talk,2
meet,3
break,4

Statistics
2013-04-10 - 2013-04-20 8 working days
                 total    average   max   min
working time
meeting time
task processing
unplanned tasks
done tasks
open tasks

Add done tasks to time line

Task    Duration
1       2
2       3
3       1
        xxooox

|---|-xxooxx|
xxooox

|---xooxxxoo|
xxooox
xoox

|--xxooxxxoo|
xxooox
xox

end_position done_tasks.size index max_duration duration total_duration
3            2               0     2            1             0
3            2               1     2            1             1 

max_duration = end_position - done_tasks.size + index - total_duration
    2               3                2            0+1         0
    2               3                2            1+1         1 

prio with position

origin    1)    2)
1         3     1
2         4     4
3         5     2
4         1     3
5         2     5

1) syctask -o 3,4,5 -p 0
2) syctask -o 2,3,5 -p 3

Determine the position for time in timeline
-w 8:30-12:45 results in a time line of
|---|---|---|---|---|
8   9  10  11  12  13

position_for_time(9) will return position = 2 but it should be 4

That is the position = starts.diff(now) + starts.min / 15
