var search_data = {"index":{"searchIndex":["consoletimer","object","sycstring","syctask","evaluator","meeting","schedule","settings","statistics","task","taskplanner","taskscheduler","taskservice","tasktracker","times","track","syctime","sycutil","console","test","unit","testcase","testdefault","testenvironment","testevaluator","testmeeting","testschedule","teststatistics","testtask","testtaskplanner","testtaskscheduler","testtaskservice","testtasktracker","testtimeutil","testtimes","<=>()","==()","add_task()","add_task_to_plan()","add_tasks()","assign()","average()","backup_system_files()","char_if_pressed()","check_environment()","collect_by_id()","compare()","compare_dates()","compare_numbers()","create()","create_reindex_log_file()","create_tracked_tasks_file()","delete()","diff()","done()","done?()","extract_time()","find()","get_files()","get_tasks()","get_times()","graph()","includes?()","initialize_id()","log_meetings()","log_reindexing()","log_system_files()","log_task()","log_work_time()","logs()","make_log_file()","matches?()","matches?()","max()","meeting_caption()","meeting_list()","min()","move_planned_tasks_files()","move_task_log_file()","move_tasks()","move_time_schedule_files()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_id()","order_tasks()","output()","plan_tasks()","planned_tasks_files()","print_csv()","print_pretty()","prioritize_tasks()","prompt()","read()","read_by_id()","read_tasks()","reindex_task()","reindex_tasks()","remove_tasks()","report()","report_line()","restore()","restore_system_files()","round_up()","save()","save_id()","save_ids()","seconds_to_time()","separated_time_string()","set_busy_times()","set_duration()","set_meeting_titles()","set_task_assignments()","set_tasks()","set_work_time()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","show()","split_lines()","start()","start()","start()","stats()","stats_count()","stop()","stop()","string_for_seconds()","task_files()","tasks()","tasks_log_files()","teardown()","teardown()","teardown()","teardown()","teardown()","teardown()","teardown()","test_the_truth()","time_between?()","time_caption()","time_for_string()","time_schedule_files()","tracked_task()","units_to_time()","update()","update()","update?()","update_lead_time()","update_planned_tasks()","update_planned_tasks_old()","update_tasks_log()","update_tasks_log_old()","update_tracked_task()","viable?()","gemfile","readme","rakefile","notes","syctask"],"longSearchIndex":["consoletimer","object","sycstring","syctask","syctask::evaluator","syctask::meeting","syctask::schedule","syctask::settings","syctask::statistics","syctask::task","syctask::taskplanner","syctask::taskscheduler","syctask::taskservice","syctask::tasktracker","syctask::times","syctask::track","syctime","sycutil","sycutil::console","test","test::unit","test::unit::testcase","testdefault","testenvironment","testevaluator","testmeeting","testschedule","teststatistics","testtask","testtaskplanner","testtaskscheduler","testtaskservice","testtasktracker","testtimeutil","testtimes","syctask::task#<=>()","syctask::task#==()","syctask::taskplanner#add_task()","object#add_task_to_plan()","syctask::taskplanner#add_tasks()","syctask::schedule#assign()","syctask::statistics#average()","test::unit::testcase#backup_system_files()","sycutil::console#char_if_pressed()","syctask#check_environment()","syctask#collect_by_id()","syctask::evaluator#compare()","syctask::evaluator#compare_dates()","syctask::evaluator#compare_numbers()","syctask::taskservice#create()","testenvironment#create_reindex_log_file()","testenvironment#create_tracked_tasks_file()","syctask::taskservice#delete()","syctask::times#diff()","syctask::task#done()","syctask::task#done?()","object#extract_time()","syctask::taskservice#find()","syctask#get_files()","syctask::taskplanner#get_tasks()","syctask::schedule#get_times()","syctask::schedule#graph()","syctask::evaluator#includes?()","syctask#initialize_id()","syctask#log_meetings()","syctask#log_reindexing()","test::unit::testcase#log_system_files()","syctask#log_task()","syctask#log_work_time()","syctask::statistics#logs()","testenvironment#make_log_file()","syctask::evaluator#matches?()","syctask::task#matches?()","syctask::statistics#max()","syctask::schedule#meeting_caption()","syctask::schedule#meeting_list()","syctask::statistics#min()","syctask#move_planned_tasks_files()","syctask#move_task_log_file()","syctask::taskplanner#move_tasks()","syctask#move_time_schedule_files()","consoletimer::new()","syctask::meeting::new()","syctask::schedule::new()","syctask::task::new()","syctask::taskplanner::new()","syctask::taskscheduler::new()","syctask::tasktracker::new()","syctask::times::new()","syctask::track::new()","syctask#next_id()","syctask::taskplanner#order_tasks()","consoletimer#output()","syctask::taskplanner#plan_tasks()","syctask#planned_tasks_files()","syctask::task#print_csv()","syctask::task#print_pretty()","syctask::taskplanner#prioritize_tasks()","sycutil::console#prompt()","syctask::taskservice#read()","syctask::taskservice#read_by_id()","syctask::settings#read_tasks()","syctask#reindex_task()","syctask#reindex_tasks()","syctask::taskplanner#remove_tasks()","syctask::statistics#report()","syctask::statistics#report_line()","syctask::taskscheduler#restore()","test::unit::testcase#restore_system_files()","syctask::times#round_up()","syctask::taskservice#save()","syctask#save_id()","syctask#save_ids()","syctime#seconds_to_time()","syctime#separated_time_string()","syctask::taskscheduler#set_busy_times()","syctask::task#set_duration()","syctask::taskscheduler#set_meeting_titles()","syctask::taskscheduler#set_task_assignments()","syctask::taskscheduler#set_tasks()","syctask::taskscheduler#set_work_time()","testenvironment#setup()","testevaluator#setup()","teststatistics#setup()","testtask#setup()","testtaskplanner#setup()","testtaskscheduler#setup()","testtaskservice#setup()","testtasktracker#setup()","syctask::taskscheduler#show()","sycstring#split_lines()","consoletimer#start()","syctask::tasktracker#start()","syctask::track#start()","syctask::statistics#stats()","syctask::statistics#stats_count()","syctask::tasktracker#stop()","syctask::track#stop()","syctime#string_for_seconds()","syctask#task_files()","syctask::settings#tasks()","syctask#tasks_log_files()","testenvironment#teardown()","teststatistics#teardown()","testtask#teardown()","testtaskplanner#teardown()","testtaskscheduler#teardown()","testtaskservice#teardown()","testtasktracker#teardown()","testdefault#test_the_truth()","syctime#time_between?()","syctask::schedule#time_caption()","syctime#time_for_string()","syctask#time_schedule_files()","syctask::tasktracker#tracked_task()","test::unit::testcase#units_to_time()","syctask::task#update()","syctask::taskservice#update()","syctask::task#update?()","syctask::task#update_lead_time()","syctask#update_planned_tasks()","syctask#update_planned_tasks_old()","syctask#update_tasks_log()","syctask#update_tasks_log_old()","syctask#update_tracked_task()","syctask#viable?()","","","","",""],"info":[["ConsoleTimer","","ConsoleTimer.html","","<p>ConsoleTimer prints a task and the lead time at the upper right corner of\nthe schreen. Invokation example: …\n"],["Object","","Object.html","",""],["Sycstring","","Sycstring.html","","<p>Sycstring provides functions for string operations\n"],["Syctask","","Syctask.html","","<p>Syctask provides functions for managing tasks in a task list\n<p>Syctask provides functions for managing tasks …\n"],["Syctask::Evaluator","","Syctask/Evaluator.html","","<p>Evaluator provides different evaluatons for comparing numbers, dates and\nstrings. Also provides methods …\n"],["Syctask::Meeting","","Syctask/Meeting.html","","<p>Meeting represents a meeting containing the begin and end time, a title and\nan agenda consisting of tasks …\n"],["Syctask::Schedule","","Syctask/Schedule.html","","<p>Schedule represents a working day with a start and end time, meeting times\nand titles and tasks. Tasks …\n"],["Syctask::Settings","","Syctask/Settings.html","","<p>Creates settings for syctask that are saved to files and retrieved when\nsyctask is started\n"],["Syctask::Statistics","","Syctask/Statistics.html","","<p>Creates statistics about the work and meeting times as well about the task\nprocessing\n"],["Syctask::Task","","Syctask/Task.html","","<p>A Task is the basic element of the task list and holds all information\nabout a task.\n"],["Syctask::TaskPlanner","","Syctask/TaskPlanner.html","","<p>A TaskPlanner prompts the user to select tasks for today. These tasks can\nbe prioritized to determine …\n"],["Syctask::TaskScheduler","","Syctask/TaskScheduler.html","","<p>The TaskScheduler creates a graphical representation of a working schedule\nwith busy times visualized. …\n"],["Syctask::TaskService","","Syctask/TaskService.html","","<p>Provides services to operate tasks as create, read, find, update and save\nTask objects\n"],["Syctask::TaskTracker","","Syctask/TaskTracker.html","","<p>TaskTracker provides methods to start a task and stop a task. The objective\nis to track the processing …\n"],["Syctask::Times","","Syctask/Times.html","","<p>Times class represents a time consisting of hour and minutes\n"],["Syctask::Track","","Syctask/Track.html","","<p>A Track holds a task and stops the time the task is processed. The Track\nwill print every second the …\n"],["Syctime","","Syctime.html","","<p>Functions for time operations\n"],["Sycutil","","Sycutil.html","","<p>Module Sycutil contains functions related to the Console that is helpers\nfor user input\n"],["Sycutil::Console","","Sycutil/Console.html","","<p>Console provides functions for user input\n"],["Test","","Test.html","",""],["Test::Unit","","Test/Unit.html","",""],["Test::Unit::TestCase","","Test/Unit/TestCase.html","","<p>Overrides Test::Unit::TestCase to add some helper methods for each test\n"],["TestDefault","","TestDefault.html","","<p>Dummy test\n"],["TestEnvironment","","TestEnvironment.html","","<p>Test the Environment module\n"],["TestEvaluator","","TestEvaluator.html","","<p>Tests for the Evaluator class\n"],["TestMeeting","","TestMeeting.html","","<p>Tests for the Meeting class\n"],["TestSchedule","","TestSchedule.html","","<p>Tests for the Schedule class\n"],["TestStatistics","","TestStatistics.html","","<p>Test the Statistics class\n"],["TestTask","","TestTask.html","","<p>Tests for the Task\n"],["TestTaskPlanner","","TestTaskPlanner.html","","<p>Tests for the TaskPlanner class\n"],["TestTaskScheduler","","TestTaskScheduler.html","","<p>Tests for the TaskScheduler class\n"],["TestTaskService","","TestTaskService.html","","<p>Tests for the TaskService\n"],["TestTaskTracker","","TestTaskTracker.html","","<p>Tests for TaskTracker\n"],["TestTimeUtil","","TestTimeUtil.html","","<p>Test for TimeUtil class\n"],["TestTimes","","TestTimes.html","","<p>Tests for the Times class\n"],["<=>","Syctask::Task","Syctask/Task.html#method-i-3C-3D-3E","(other)","<p>Compares this Task to the other task and compares them regarding the ID \nand the dir. If ID is equal …\n"],["==","Syctask::Task","Syctask/Task.html#method-i-3D-3D","(other)","<p>Compares this task with another task regarding id and dir. If both are \nequal true is returned otherwise …\n"],["add_task","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-i-add_task","(task, date=Time.now.strftime(\"%Y-%m-%d\"))","<p>Add the task to the planned tasks of the specified date. The task is only\nadded if not already present …\n"],["add_task_to_plan","Object","Object.html#method-i-add_task_to_plan","(task)","<p>Add task to task plan\n"],["add_tasks","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-i-add_tasks","(tasks, date=Time.now.strftime(\"%Y-%m-%d\"))","<p>Add the tasks to the planned tasks. A task is only added if not already\npresent\n"],["assign","Syctask::Schedule","Syctask/Schedule.html#method-i-assign","(assignments)","<p>Sets the assignments containing tasks that are assigned to meetings.\nReturns true if succeeds\n"],["average","Syctask::Statistics","Syctask/Statistics.html#method-i-average","(data)","<p>Calculates the average of a task processing, work or meeting time\n"],["backup_system_files","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-backup_system_files","(caller)","<p>Backs up system files before manipulating them in the test\n"],["char_if_pressed","Sycutil::Console","Sycutil/Console.html#method-i-char_if_pressed","()","<p>Listens for key presses and returns the pressed key without pressing return\n"],["check_environment","Syctask","Syctask.html#method-i-check_environment","()","<p>Checks whether all files are available that are needed for syctask’s\noperation\n"],["collect_by_id","Syctask","Syctask.html#method-i-collect_by_id","(tasks)","<p>Extracts tasks that have no unique id\n"],["compare","Syctask::Evaluator","Syctask/Evaluator.html#method-i-compare","(value, operands)","<p>Compares two values regarding &lt;|=|&gt;. Returns true if the comparisson\nsucceeds otherwise false. …\n"],["compare_dates","Syctask::Evaluator","Syctask/Evaluator.html#method-i-compare_dates","(value, pattern)","<p>Compares two dates regarding &lt;|=|&gt;. Returns true if the comparisson\nsucceeds otherwise false.  …\n"],["compare_numbers","Syctask::Evaluator","Syctask/Evaluator.html#method-i-compare_numbers","(value, pattern)","<p>Compares two numbers regarding &lt;|=|&gt;. Returns true if the comparisson\nsucceeds otherwise false. …\n"],["create","Syctask::TaskService","Syctask/TaskService.html#method-i-create","(dir, options, title)","<p>Creates a new task in the specified directory, with the specified options\nand the specified title. If …\n"],["create_reindex_log_file","TestEnvironment","TestEnvironment.html#method-i-create_reindex_log_file","()","<p>Create the reindex_log file and add some re-indexing logs\n"],["create_tracked_tasks_file","TestEnvironment","TestEnvironment.html#method-i-create_tracked_tasks_file","()","<p>Create tracked_tasks file and add a track\n"],["delete","Syctask::TaskService","Syctask/TaskService.html#method-i-delete","(dir, filter)","<p>Deletes tasks in the specified directory that match the provided filter. If\nno filter is provide no task …\n"],["diff","Syctask::Times","Syctask/Times.html#method-i-diff","(time = Time.now)","<p>Calculates the difference between this time and the provided time. If no\ntime is given the current time …\n"],["done","Syctask::Task","Syctask/Task.html#method-i-done","(note=\"\")","<p>Marks the task as done. When done than the done date is set. Optionally a\nnote can be provided.\n"],["done?","Syctask::Task","Syctask/Task.html#method-i-done-3F","()","<p>Checks if this task is done. Returns true if done otherwise false\n"],["extract_time","Object","Object.html#method-i-extract_time","(time_string,time=false)","<p>Extracts the time out of a time string. Accepts ‘today’, ‘tomorrow’,\n‘yesterday’ or a date in the form …\n"],["find","Syctask::TaskService","Syctask/TaskService.html#method-i-find","(dir, filter={}, all=true)","<p>Finds all tasks that match the given filter. The filter can be provided for\n:id, :title, :description, …\n"],["get_files","Syctask","Syctask.html#method-i-get_files","(dir, pattern)","<p>Retrieves all files that meet the pattern in and below the given directory\n"],["get_tasks","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-i-get_tasks","(date=Time.now.strftime(\"%Y-%m-%d\"), filter={})","<p>Get planned tasks of the specified date. Retrieve only tasks that match the\nspecified filter (filter …\n"],["get_times","Syctask::Schedule","Syctask/Schedule.html#method-i-get_times","()","<p>Retrieves the work and busy times transformed to the time line scale\n"],["graph","Syctask::Schedule","Syctask/Schedule.html#method-i-graph","()","<p>graph first creates creates the time line. Then the busy times are added.\nAfter that the tasks are added …\n"],["includes?","Syctask::Evaluator","Syctask/Evaluator.html#method-i-includes-3F","(value, pattern)","<p>Evaluates whether value is part of the provided csv pattern. Returns true\nif it evaluates to true otherwise …\n"],["initialize_id","Syctask","Syctask.html#method-i-initialize_id","(tasks)","<p>Determines the greatest task ID out of the provided tasks and saves it to\nthe ID file\n"],["log_meetings","Syctask","Syctask.html#method-i-log_meetings","(type, busy_time, meetings)","<p>Logs meeting times\n"],["log_reindexing","Syctask","Syctask.html#method-i-log_reindexing","(old_id, new_id, file)","<p>Logs if a task is re-indexed\n"],["log_system_files","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-log_system_files","(message)","<p>Logs the backup and restore of system files. Used by backup_system_files\nand restore_system_files\n"],["log_task","Syctask","Syctask.html#method-i-log_task","(type, task)","<p>Logs a task regarding create, update, done, delete\n"],["log_work_time","Syctask","Syctask.html#method-i-log_work_time","(type, work_time)","<p>Logs the work time\n"],["logs","Syctask::Statistics","Syctask/Statistics.html#method-i-logs","(file, from=\"\", to=from)","<p>Retrieves the log entries from the log file\n"],["make_log_file","TestEnvironment","TestEnvironment.html#method-i-make_log_file","()","<p>Fills the log file with entries and returns these in a hash\n"],["matches?","Syctask::Evaluator","Syctask/Evaluator.html#method-i-matches-3F","(value, regex)","<p>Evaluates if value matches the provided regex. Returns true if a match is\nfound. If value or regex is …\n"],["matches?","Syctask::Task","Syctask/Task.html#method-i-matches-3F","(filter = {})","<p>Compares the provided elements in the filter with the correspondent\nelements in the task. When all comparissons …\n"],["max","Syctask::Statistics","Syctask/Statistics.html#method-i-max","(data)","<p>Calculates the maximum duration of task processing, work or meeting time\n"],["meeting_caption","Syctask::Schedule","Syctask/Schedule.html#method-i-meeting_caption","()","<p>Creates a meeting caption and returns it for printing\n"],["meeting_list","Syctask::Schedule","Syctask/Schedule.html#method-i-meeting_list","()","<p>Creates a meeting list for printing. Returns the meeting list\n"],["min","Syctask::Statistics","Syctask/Statistics.html#method-i-min","(data)","<p>Calculates the minimum duration of task processing, work or meeting time\n"],["move_planned_tasks_files","Syctask","Syctask.html#method-i-move_planned_tasks_files","(dir)","<p>Moves the planned tasks file to the system directory if not there. Should \nonly be if upgrading from …\n"],["move_task_log_file","Syctask","Syctask.html#method-i-move_task_log_file","(dir)","<p>Moves the tasks.log file to the system directory if not there. Should only\nbe if upgrading from version …\n"],["move_tasks","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-i-move_tasks","(filter={}, from_date=Time.now.strftime(\"%Y-%m-%d\"), to_date)","<p>Moves the specified tasks to the specified date. Returns the count of moved\nfiles\n"],["move_time_schedule_files","Syctask","Syctask.html#method-i-move_time_schedule_files","(dir)","<p>Moves the schedule file to the system directory if not there. Should  only\nbe if upgrading from version …\n"],["new","ConsoleTimer","ConsoleTimer.html#method-c-new","(time, id, semaphore)","<p>Create a new ConsoleTimer with the time to count down, the task’s ID and a\nsemaphore. The semaphore is …\n"],["new","Syctask::Meeting","Syctask/Meeting.html#method-c-new","(time, title=\"\", tasks=[])","<p>Sets the busy time for the schedule. The busy times have to be provided as\nhh:mm-hh:mm. Optionally a …\n"],["new","Syctask::Schedule","Syctask/Schedule.html#method-c-new","(work_time, busy_time=[], titles=[], tasks=[])","<p>Creates a new Schedule and initializes work time, busy times, titles and\ntasks. Work time is mandatory, …\n"],["new","Syctask::Task","Syctask/Task.html#method-c-new","(options={}, title, id)","<p>Creates a new task. If the options contain a note than the current date and\ntime is added.\n"],["new","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-c-new","()","<p>Creates a new TaskPlanner\n"],["new","Syctask::TaskScheduler","Syctask/TaskScheduler.html#method-c-new","()","<p>Creates a new TaskScheduler.\n"],["new","Syctask::TaskTracker","Syctask/TaskTracker.html#method-c-new","()","<p>Creates a new TaskTracker\n"],["new","Syctask::Times","Syctask/Times.html#method-c-new","(time)","<p>Creates a new Times object. time has to be provided as an array with the\ncontent as [“hour”,“minute”] …\n"],["new","Syctask::Track","Syctask/Track.html#method-c-new","(task)","<p>Creates a new Track for the provided task\n"],["next_id","Syctask","Syctask.html#method-i-next_id","()","<p>Retrieve the next unassigned task id\n"],["order_tasks","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-i-order_tasks","(date, ids)","<p>Order tasks in the provided IDs sequence at the specified date. If not IDs\nare provided than rest of …\n"],["output","ConsoleTimer","ConsoleTimer.html#method-i-output","()","<p>Prints the id and the lead time of the currently tracked task. As long as\nthe provided time is greater …\n"],["plan_tasks","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-i-plan_tasks","(tasks, date=Time.now.strftime(\"%Y-%m-%d\"))","<p>List each task and prompt the user whether to add the task to the planned\ntasks. The user doesn’t specify …\n"],["planned_tasks_files","Syctask","Syctask.html#method-i-planned_tasks_files","(dir)","<p>Retrieves all planned task files in and below the given directory\n"],["print_csv","Syctask::Task","Syctask/Task.html#method-i-print_csv","()","<p>Prints the task as a CSV\n"],["print_pretty","Syctask::Task","Syctask/Task.html#method-i-print_pretty","(long=false)","<p>Prints the task in a formatted way eather all values when long is true or\nonly id, title, prio, follow-up …\n"],["prioritize_tasks","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-i-prioritize_tasks","(date=Time.now.strftime(\"%Y-%m-%d\"), filter={})","<p>Prioritize tasks by pair wise comparisson. Each task is compared to the\nother tasks and the user can …\n"],["prompt","Sycutil::Console","Sycutil/Console.html#method-i-prompt","(choice_line)","<p>Prompts the user for input.\n<p>choice_line is the prompt string. If the prompt string contains a (x)\nsequence …\n"],["read","Syctask::TaskService","Syctask/TaskService.html#method-i-read","(dir, id)","<p>Reads the task with given ID id located in given directory dir. If task\ndoes not exist nil is returned …\n"],["read_by_id","Syctask::TaskService","Syctask/TaskService.html#method-i-read_by_id","(id)","<p>Reads the task identified by ID. If no task with ID is found nil is\nreturned otherwise the task\n"],["read_tasks","Syctask::Settings","Syctask/Settings.html#method-i-read_tasks","()","<p>Retrieves the general purpose files from the default_tasks file in the\nsyctask system directory\n"],["reindex_task","Syctask","Syctask.html#method-i-reindex_task","(file)","<p>Re-indexes the tasks’ IDs and renames the task files to match the new ID.\nThe orginal file is deleted. …\n"],["reindex_tasks","Syctask","Syctask.html#method-i-reindex_tasks","(root)","<p>Re-indexing of tasks is done when tasks are available but SYC_DIR or ID\nfile is missing. The ID file …\n"],["remove_tasks","Syctask::TaskPlanner","Syctask/TaskPlanner.html#method-i-remove_tasks","(date=Time.now.strftime(\"%Y-%m-%d\"), filter={})","<p>Remove planned tasks from the task plan based on the provided filter\n(filter options see Task#matches? …\n"],["report","Syctask::Statistics","Syctask/Statistics.html#method-i-report","(file, from=\"\", to=from)","<p>Creates a statistics report\n"],["report_line","Syctask::Statistics","Syctask/Statistics.html#method-i-report_line","(key, total, min, max, average)","<p>Creates a report line for the report\n"],["restore","Syctask::TaskScheduler","Syctask/TaskScheduler.html#method-i-restore","(value)","<p>Restores the value of a previous invokation. Posible values are :work_time,\n:busy_time, :meetings and …\n"],["restore_system_files","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-restore_system_files","(caller)","<p>Restores the file systems after the test\n"],["round_up","Syctask::Times","Syctask/Times.html#method-i-round_up","()","<p>Rounds the time to the next hour if minutes is greater than 0\n"],["save","Syctask::TaskService","Syctask/TaskService.html#method-i-save","(dir, task)","<p>Saves the task to the task directory. If dir is nil the default dir\n~/.tasks will be set.\n"],["save_id","Syctask","Syctask.html#method-i-save_id","(id)","<p>Save the id to the ID file. Returns the id when save was successful\n"],["save_ids","Syctask","Syctask.html#method-i-save_ids","(id, file)","<p>Saves the ids to ids file\n"],["seconds_to_time","Syctime","Syctime.html#method-i-seconds_to_time","(seconds)","<p>Translates seconds to years, months, weeks, days, hours, minutes and\nseconds The return value is an array …\n"],["separated_time_string","Syctime","Syctime.html#method-i-separated_time_string","(seconds, separator)","<p>Creates a time string separating hours, minutes and seconds with the\nprovided separator like 12:50:33 …\n"],["set_busy_times","Syctask::TaskScheduler","Syctask/TaskScheduler.html#method-i-set_busy_times","(busy_time)","<p>Set the busy times. Raises an exception if one begin time is after start\ntime Invokation: set_busy_times([ …\n"],["set_duration","Syctask::Task","Syctask/Task.html#method-i-set_duration","(duration)","<p>Sets the duration that this task is planned for processing. Assigns to\nremaining the duration time\n"],["set_meeting_titles","Syctask::TaskScheduler","Syctask/TaskScheduler.html#method-i-set_meeting_titles","(titles)","<p>Sets the titles of the meetings (busy times) Invokation:\nset_meeting_titles(“title1,title2,title3”) …\n"],["set_task_assignments","Syctask::TaskScheduler","Syctask/TaskScheduler.html#method-i-set_task_assignments","(assignments)","<p>Add scheduled tasks to busy times Invokation:\nset_task_assignments([,[“B”,“2,5,6,7”]]) …\n"],["set_tasks","Syctask::TaskScheduler","Syctask/TaskScheduler.html#method-i-set_tasks","(tasks)","<p>Sets the tasks for scheduling\n"],["set_work_time","Syctask::TaskScheduler","Syctask/TaskScheduler.html#method-i-set_work_time","(work_time)","<p>Set the work time. Raises an exception if begin time is after start time\nInvokation: set_work_time() …\n"],["setup","TestEnvironment","TestEnvironment.html#method-i-setup","()","<p>Backup system files and create empty system files and tasks for the test\n"],["setup","TestEvaluator","TestEvaluator.html#method-i-setup","()","<p>Creates the evaluator object before each shoulda\n"],["setup","TestStatistics","TestStatistics.html#method-i-setup","()","<p>Create tasks and entries.\n<p>Tasks\n\n<pre>start|stop;id;dir;title;start;</pre>\n"],["setup","TestTask","TestTask.html#method-i-setup","()","<p>Backup system files\n"],["setup","TestTaskPlanner","TestTaskPlanner.html#method-i-setup","()","<p>Sets up the test and initializes variables used in the tests\n"],["setup","TestTaskScheduler","TestTaskScheduler.html#method-i-setup","()","<p>Sets up the test case and initializes the directory for the test tasks to\nlive\n"],["setup","TestTaskService","TestTaskService.html#method-i-setup","()","<p>Creates a TaskService object used in each shoulda\n"],["setup","TestTaskTracker","TestTaskTracker.html#method-i-setup","()","<p>Create variables and tasks for tests\n"],["show","Syctask::TaskScheduler","Syctask/TaskScheduler.html#method-i-show","()","<p>Prints the meeting list, timeline and task list\n"],["split_lines","Sycstring","Sycstring.html#method-i-split_lines","(string, length)","<p>Splits a string to size (chars) less or equal to length\n"],["start","ConsoleTimer","ConsoleTimer.html#method-i-start","()","<p>Starts the timer. The timer is run as long the semaphore is available\n"],["start","Syctask::TaskTracker","Syctask/TaskTracker.html#method-i-start","(task, show=true)","<p>When a task is started it is saved with the start time. If a task is\nalready tracked it is stopped (see …\n"],["start","Syctask::Track","Syctask/Track.html#method-i-start","(show)","<p>Starts the tracking and a timer that will print to STDOUT every second the\nelapsed time and the time …\n"],["stats","Syctask::Statistics","Syctask/Statistics.html#method-i-stats","(data)","<p>Calculates total, min, max and average time of task processing, work or\nmeeting time\n"],["stats_count","Syctask::Statistics","Syctask/Statistics.html#method-i-stats_count","(data)","<p>Calculates the total, min, max and average count of task processing, \ncreation, update, done, delete …\n"],["stop","Syctask::TaskTracker","Syctask/TaskTracker.html#method-i-stop","()","<p>When a task is stopped it is removed from the started_tasks file and the\nprocessing time is added to …\n"],["stop","Syctask::Track","Syctask/Track.html#method-i-stop","()","<p>Stops the task tracking and returns the lead time of the task\n"],["string_for_seconds","Syctime","Syctime.html#method-i-string_for_seconds","(seconds)","<p>Translates seconds into a time string like 1 year 2 weeks 5 days 10\nminutes.\n"],["task_files","Syctask","Syctask.html#method-i-task_files","(dir)","<p>Retrieves all task files in and below the provided dir. Returns an array of\ntask files\n"],["tasks","Syctask::Settings","Syctask/Settings.html#method-i-tasks","(tasks)","<p>Creates general purpose tasks that can be tracked with syctask start. The\ngeneral purpose files are saved …\n"],["tasks_log_files","Syctask","Syctask.html#method-i-tasks_log_files","(dir)","<p>Retrieves als tasks.log files in and below the given directory\n"],["teardown","TestEnvironment","TestEnvironment.html#method-i-teardown","()","<p>Restore system files and clean directories from test files\n"],["teardown","TestStatistics","TestStatistics.html#method-i-teardown","()","<p>Restore the system files\n"],["teardown","TestTask","TestTask.html#method-i-teardown","()","<p>Restore system files\n"],["teardown","TestTaskPlanner","TestTaskPlanner.html#method-i-teardown","()","<p>Removes files and directories created during the tests\n"],["teardown","TestTaskScheduler","TestTaskScheduler.html#method-i-teardown","()","<p>Removes after each test the test task directory\n"],["teardown","TestTaskService","TestTaskService.html#method-i-teardown","()","<p>Removes files and directories created by the tests\n"],["teardown","TestTaskTracker","TestTaskTracker.html#method-i-teardown","()","<p>Remove created files and directories during tests\n"],["test_the_truth","TestDefault","TestDefault.html#method-i-test_the_truth","()","<p>Always passes the test\n"],["time_between?","Syctime","Syctime.html#method-i-time_between-3F","(time, from, to)","<p>Tests whether the time is between from and to. Returns true then otherwise\nfalse. Time, from and to are …\n"],["time_caption","Syctask::Schedule","Syctask/Schedule.html#method-i-time_caption","()","<p>Creates the time caption for the time line\n"],["time_for_string","Syctime","Syctime.html#method-i-time_for_string","(time)","<p>Translates a time in the ISO 8601 schema to a time object.\n\n<pre>2013-04-09 21:45 -200</pre>\n"],["time_schedule_files","Syctask","Syctask.html#method-i-time_schedule_files","(dir)","<p>Retrieves all schedule files in and below the given directory\n"],["tracked_task","Syctask::TaskTracker","Syctask/TaskTracker.html#method-i-tracked_task","()","<p>Retrieves the currently tracked task returns nil if no task is tracked\n"],["units_to_time","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-units_to_time","(units)","<p>Calculates the seconds for the provided time units. One unit is 900 seconds\nor 15 minutes. This time …\n"],["update","Syctask::Task","Syctask/Task.html#method-i-update","(options)","<p>Updates the task with new values. Except for note and tags which are\nsupplemented with the new values …\n"],["update","Syctask::TaskService","Syctask/TaskService.html#method-i-update","(dir, id, options)","<p>Updates the task with the given id in the given directory dir with the\nprovided options.  Options are …\n"],["update?","Syctask::Task","Syctask/Task.html#method-i-update-3F","()","<p>Checks whether this task has been updated. Returns true if updated\notherwise false\n"],["update_lead_time","Syctask::Task","Syctask/Task.html#method-i-update_lead_time","(lead_time)","<p>Updates the lead time. Adds the lead time to @lead_time and calculates\n@remaining\n"],["update_planned_tasks","Syctask","Syctask.html#method-i-update_planned_tasks","(dir, new_ids)","<p>Replaces the old ids with the new ids in the planned tasks files. A planned\ntasks file has the form ‘ …\n"],["update_planned_tasks_old","Syctask","Syctask.html#method-i-update_planned_tasks_old","(dir, old_id, new_id, file)","<p>TODO delete\n"],["update_tasks_log","Syctask","Syctask.html#method-i-update_tasks_log","(dir, new_ids)","<p>Updates the tasks.log file if tasks are re-indexed with the task’s new ids\n"],["update_tasks_log_old","Syctask","Syctask.html#method-i-update_tasks_log_old","(dir, old_id, new_id, file)","<p>TODO delete\n"],["update_tracked_task","Syctask","Syctask.html#method-i-update_tracked_task","(dir)","<p>Updates tracked_tasks file if task has been re-indexed with new ID\n"],["viable?","Syctask","Syctask.html#method-i-viable-3F","()","<p>Checks if system files are available that are needed for running syc-task.\nReturns true if neccessary …\n"],["Gemfile","","Gemfile.html","","<p>source :rubygems gemspec\n"],["README","","README_rdoc.html","","<p>Simple task organizer\n<p>syctask can be used to create, plan, prioritize and schedule tasks.\n<p>Install\n"],["Rakefile","","Rakefile.html","","<p>require ‘rake/clean’ require ‘rubygems’ require ‘rubygems/package_task’\nrequire ‘rdoc/task’ require ‘cucumber’ …\n"],["notes","","notes.html","","<p>i                       i-c 0     start 1     0      -0 1     stop  1     0\n-1 2     start 2    …\n"],["syctask","","syctask_rdoc.html","","<p>syctask\n<p>Generate this with\n\n<pre>syctask rdoc</pre>\n"]]}}