#!/usr/bin/env ruby
require 'gli'
require 'syctask'
include GLI::App
include Syctime
include Syctask

program_desc 'A simple task manager'

version Syctask::VERSION

@settings = Syctask::Settings.new
@general_purpose_tasks = '|' + @settings.read_tasks.keys.join('|')

desc 'The directory where tasks are saved to'
default_value Syctask::WORK_DIR
arg_name 'TASK_DIR'
flag [:t,:taskdir]

desc 'Project name where tasks are saved'
arg_name 'PROJECT'
flag [:p, :project]

desc 'Settings for syctask'
command :settings do |c|

  c.desc 'Define general purpose tasks to be used with the start command'
  c.arg_name 'TASK'
  c.flag [:g, :general], :must_match => /^\w+(?:,\w+)*/

  c.desc 'Define the default task directory. System default is ~/.tasks'
  c.arg_name 'DIR'
  c.flag [:t, :taskdir]

  c.desc 'List all settings'
  c.switch [:l, :list]
  
  c.action do |global_options,options,args|
    settings = Syctask::Settings.new
    filter = [:general, :taskdir, :list]
    options.keep_if {|key, value| filter.find_index(key)}
    if options[:general]
      settings.tasks(options[:general])
    end

    if options[:taskdir]
      set_taskdir = true
      puts options[:taskdir]
      dir = File.expand_path(options[:taskdir]) unless options[:taskdir].empty?
      if dir
        unless File.exists? dir
          puts sprintf("Directory %s doesn't exist!", dir).color(:red)
          print sprintf("%s ", "Create it (Y/n)?").color(:red)
          set_taskdir = gets.chomp == 'Y'
          if set_taskdir
            FileUtils.mkdir_p dir
            puts sprintf("--> Created directory %s", File.expand_path(dir)).
              color(:green)
          end
        end
        if set_taskdir
          File.write(Syctask::DEFAULT_TASKS_DIR, dir)
          puts sprintf("--> Set %s as default task directory", dir).
            color(:green)
        end
      end
    end

    if options[:list]
      puts sprintf("Default task directory: #{global_options[:taskdir]}").
        color(:green)
      general_purpose_tasks = settings.read_tasks
      puts sprintf("%d general purpose tasks", general_purpose_tasks.size).
        color(:green)
      general_purpose_tasks.each do |key, value|
        puts sprintf(" + %s (%s)", key, value).color(:green)
      end
    end

  end

end

desc 'Information about tasks and task directories'
command :info do |c|

  c.desc 'Directory where to start searching the task'
  c.arg_name 'DIR'
  c.flag [:d, :dir]

  c.desc 'Find task with the given ID'
  c.arg_name 'ID'
  c.flag [:i, :id], :must_match => /^\d+/
  
  c.desc 'Show task directories'
  c.switch [:t, :taskdir]

  c.action do |global_options,options,args|
    dir = options[:dir]
    dir ||= ENV['HOME']
    dir = File.expand_path(dir)
    help_now! "Directory #{dir} does not exists" unless File.exists? dir
    id = options[:id]
    if id
      tasks = Syctask::get_files(dir, [], /#{id}\.task/)
      tasks.each {|task| puts sprintf("%s", task).color(:green)} 
      puts sprintf("--> No task with ID %s found", id).
        color(:red) if tasks.empty?
    end  
    if options[:taskdir]
      dirs = Syctask::get_task_dirs_and_count(dir)
      task_count = 0
      dirs.each do |key,value| 
        puts "#{key} (#{value})"
        task_count += value
      end
      puts sprintf("--> %d task directories with %d tasks found", 
                   dirs.length, task_count).color(:green)
    end
  end

end

desc 'Create a new task'
arg_name 'TASK_TITLE'
command :new do |c|
  c.desc 'Priority of the task, 1 highes priority'
  c.default_value 3
  c.arg_name 'PRIO'
  c.flag [:p, :prio], :type => Integer

  c.desc 'Follow-up date'
  c.arg_name 'FOLLOW-UP'
  c.flag [:f, :follow_up]
  
  c.desc 'Due date'
  c.arg_name 'DUE'
  c.flag [:d, :due_date]

  c.desc 'Description of the task'
  c.arg_name 'DESCRIPTION'
  c.flag :description

  c.desc 'Note on progress of the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.desc 'Tags that describe the task'
  c.arg_name 'TAG1,TAG2,TAG3'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*/

  c.action do |global_options,options,args|
    options[:follow_up] = extract_time(options[:f]) if options[:f]
    options[:due_date]  = extract_time(options[:d]) if options[:d]
    filter = [:tags, :description, :prio, :due_date, :follow_up, 
              :note]
    options.keep_if {|key, value| filter.find_index(key)}
    if args.empty?
      STDOUT.puts "Reading new tasks from STDIN now... (end with CTRL-D)"
      args = STDIN.readlines.map {|t| t.chomp}
    end
    task_numbers = nil
    args.each do |title|
      title.gsub!("\n","")
      task_number = @service.create(global_options[:t], options, title)
      add_task_to_plan @service.read(global_options[:t], task_number)
      if task_numbers.nil? 
        task_numbers = task_number.to_s 
      else 
        task_numbers += ", #{task_number}"
      end
    end
    if args.empty?
      puts
      help_now! "You have to provide at least a title to create a task"
    else
      STDOUT.puts sprintf("%s %s", "--> created tasks with task numbers",
                          " #{task_numbers}").color(:green)
    end
  end
end

desc 'Extract tasks from a file'
arg_name 'TASK_FILE'
command :scan do |c|
  c.action do |global_options,options,args|
    help_now! "You must provide file(s) to extract tasks from" if args.empty?
    scanner = Syctask::Scanner.new
    task_numbers = []
    args.each do |file|
      scanner.scan(file).each do |title, options| 
        task_number = @service.create(global_options[:t], options, title)
        add_task_to_plan @service.read(global_options[:t], task_number)
        task_numbers << task_number
      end
    end
    
    if task_numbers.empty?
      puts
      help_now! "#{args.join(', ')} doesn't contain tasks"
    else
      STDOUT.puts sprintf("%s %s", "--> created tasks with task numbers",
                          " #{task_numbers.join(', ')}").color(:green)
    end
  end
end

desc 'Delete tasks from task list or from task plan'
command :delete do |c|
  c.desc 'Remove tasks from task plan of today, tomorrow or another date'
  c.arg_name 'DATE'
  c.flag :plan

  c.desc 'IDs of the tasks to remove'
  c.arg_name 'ID1,ID2,..,IDn'
  c.flag [:i, :id], :must_match => /^\d+(?:,\d+)*|\d+/ 

  c.action do |global_options,options,args|
    help_now! "You must provide tasks ids to delete" unless options[:id]
    plan = options[:plan]
    filter = [:id]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}
    date = extract_time(plan)
    if plan
      count = @planner.remove_tasks(date, options)
      STDOUT.puts sprintf("--> removed %d tasks from task plan of %s", 
                          count, date).color(:green)
    else
      count = @service.delete(global_options[:t], options) 
      STDOUT.puts sprintf("--> removed %d tasks from %s", 
                          count, global_options[:t]).color(:green)
     end    
  end
end

desc 'List tasks'
command :list do |c|

  c.desc 'List all tasks done and open'
  c.switch [:a, :all]
  
  c.desc 'Print complete task'
  c.switch [:c, :complete]

  c.desc 'Print as csv separated by ";"'
  c.switch [:csv]

  c.desc 'Filter for ID'
  c.arg_name 'ID1,ID2,ID3|[<|=|>]ID'
  c.flag [:i, :id], :must_match => /^\d+(?:,\d+)*|^[<|=|>]\d+/ 

  c.desc 'REGEXP as filter for title'
  c.arg_name 'REGEXP'
  c.flag [:title]

  c.desc 'Filter for priority'
  c.arg_name '[<|=|>]PRIO'
  c.flag [:p, :prio], :must_match => /^\d+|^[<|=|>]\d+/

  c.desc 'Filter for follow-up date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:f, :follow_up], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/
  
  c.desc 'Filter for due date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:d, :due_date], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/

  c.desc 'REGEXP as filter for description'
  c.arg_name 'REGEXP'
  c.flag :description

  c.desc 'REGEXP as filter for note'
  c.arg_name 'REGEXP'
  c.flag [:n, :note]

  c.desc 'Tags or REGEXP as filter for tags'
  c.arg_name 'TAG1,TAG2,TAG3|REGEXP'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*|\/.*\//

  c.action do |global_options,options,args|
    filter = [:id, :tags, :description, :prio, :due_date, :follow_up, 
              :note, :title]
    csv = options[:csv]
    all = options[:all]
    complete = options[:complete]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}
    count = 0
    @service.find(global_options[:t], options, all).each do |task|
      if csv
        task.print_csv
      else
        task.print_pretty(complete)
        count += 1
      end
    end      
    STDOUT.puts sprintf("--> found %d tasks", count).color(:green) unless csv
  end
end

desc 'Show statistics for time, count and optionally tags'
arg_name '[FROM[ TO]]'
command :statistics do |c|

  c.desc 'Show statistics for tags'
  c.switch [:t, :tags]

  c.action do |global_options,options,args|
    from = extract_time(args[0],true) if args[0]
    from ||= ""
    to   = extract_time(args[1],true) if args[1]
    to   = from unless to
    stats = Syctask::Statistics.new
    STDOUT.puts stats.report(Syctask::TASKS_LOG, from, to)
    puts "tags not implemented yet" if options[:tags]
  end

end

desc 'Edit task in editor'
arg_name 'ID'
command :edit do |c|

  c.action do |global_options,options,args|
    task = @service.read(global_options[:taskdir], args[0])
    if task
      task_file = "#{task.dir}/#{task.id}.task"
      if File.exists? task_file
        system "vi #{task_file}" if File.exists? task_file
      else
        puts sprintf("--> Task %s doesn't exist", task_file).color(:red)
      end
    else
      puts sprintf("--> Task with ID %s doesnt't exist", args[0]).color(:red)
    end
  end

end

desc 'Inspect tasks and edit, delete and mark as done'
command :inspect do |c|

  c.action do |global_options,options,args|
    @planner.inspect_tasks(@service.find(global_options[:t], options, false))
  end

end

desc 'Plan or show planned tasks for today, tomorrow or another day'
arg_name 'DATE'
command :plan do |c|
  
  c.desc 'Show planned tasks'
  c.arg_name 'show'
  c.switch :show

  c.desc 'Show complete tasks'
  c.arg_name 'complete'
  c.switch [:c, :complete]

  c.desc 'Move planned task to another day'
  c.arg_name 'DATE'
  c.flag [:m, :move]

  c.desc 'Filter for ID'
  c.arg_name 'ID1,ID2,ID3|[<|=|>]ID'
  c.flag [:i, :id], :must_match => /^\d+(?:,\d+)*|^[<|=|>]\d+/ 

  c.desc 'REGEXP as filter for title'
  c.arg_name 'REGEXP'
  c.flag [:title]

  c.desc 'Filter for priority'
  c.arg_name '[<|=|>]PRIO'
  c.flag [:p, :prio], :must_match => /^\d+|^[<|=|>]\d+/

  c.desc 'Filter for follow-up date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:f, :follow_up], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/
  
  c.desc 'Filter for due date'
  c.arg_name '[<|=|>]DATE'
  c.flag [:d, :due_date], :must_match => /^(?:[<|=|>])?\d{4}-\d{2}-\d{2}/

  c.desc 'REGEXP as filter for description'
  c.arg_name 'REGEXP'
  c.flag :description

  c.desc 'REGEXP as filter for note'
  c.arg_name 'REGEXP'
  c.flag [:n, :note]

  c.desc 'Tags or REGEXP as filter for tags'
  c.arg_name 'TAG1,TAG2,TAG3|REGEXP'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*|\/.*\//
 
  c.action do |global_options,options,args|
    ARGV.clear

    # Any option that is no filter has to be captured before filter is created
    show = options[:show]
    complete = options[:complete]
    to_date = extract_time(options[:move]) if options[:move]

    filter = [:id, :tags, :description, :prio, :due_date, :follow_up, 
              :note, :title]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}

    date = extract_time(args[0])
    if show
      count = 0
      @planner.get_tasks(date, options).each do |task|
        task.print_pretty(complete)
        count += 1
      end
      STDOUT.puts sprintf("--> found %d planned task(s) for %s", count, date).
                         color(:green)
    elsif to_date
      count = @planner.move_tasks(options, date, to_date)
      STDOUT.puts sprintf("--> %d task(s) moved", count).color(:green)
    else
      count = @planner.plan_tasks(@service.find(global_options[:t], options, 
                                                false), date)
      STDOUT.puts sprintf("--> %d task(s) planned", count).color(:green)
    end
  end
end

desc 'Create schedule for planned tasks'
command :schedule do |c|

  c.desc 'Work time'
  c.arg_name 'HH:MM-HH:MM'
  c.flag [:w, :work] 

  c.desc 'Busy time'
  c.arg_name 'HH:MM-HH:MM,...'
  c.flag [:b, :busy] 

  c.desc 'Meeting Titles'
  c.arg_name 'TITLE,...'
  c.flag [:m, :meeting]

  c.desc 'Assign tasks to a meeting'
  c.arg_name 'MEETING:TASK#1,...'
  c.flag [:a, :assign]

  c.desc 'Show schedule'
  c.switch :show

  c.action do |global_options,options,args|
    
    scheduler = Syctask::TaskScheduler.new

    if options[:work].nil?
      help_now! "No work time set" unless scheduler.restore(:work_time)
    elsif options[:work].scan(Syctask::TaskScheduler::WORK_TIME_PATTERN).nil?
      help_now! "Work time has to be in yyyy-mm-dd" 
    else
      scheduler.set_work_time(options[:work])
    end

    if options[:busy].nil?
      scheduler.set_busy_times("") unless scheduler.restore(:busy_time)
    elsif options[:busy].scan(Syctask::TaskScheduler::BUSY_TIME_PATTERN).nil?
      help_now! "Busy time has to be in yyyy-mm-dd"
    else
      scheduler.set_busy_times(options[:busy])
    end

    if options[:meeting].nil?
      scheduler.set_meeting_titles("") unless scheduler.restore(:meetings)
    elsif options[:meeting].split(',').empty?
      help_now! "Meeting titles have to be in 'Title1,Title2,...'"
    else
      scheduler.set_meeting_titles(options[:meeting])
    end

    scheduler.set_tasks(@planner.get_tasks)

    if options[:assign].nil?
      scheduler.restore(:assignments)
    elsif options[:assign].scan(Syctask::TaskScheduler::ASSIGNMENT_PATTERN).nil?
      help_now! "Task assignments to meetings have to be in 'A:1,2,3;B:1;...'"
    else
      scheduler.set_task_assignments(options[:assign])
    end

    scheduler.show
    
  end
end

desc 'Prioritize tasks of today, tomorrow or another day'
arg_name 'DATE'
default_value 'today'
command :prio do |c|

  c.desc 'Prioritize in specified order'
  c.arg_name 'ID1,ID2,ID3,...'
  c.flag [:o, :order], :must_match => /^\d+(?:,\d+)*/ 

  c.desc 'Put task at specified position'
  c.arg_name 'POS'
  c.flag [:p, :position], :must_match => /first|FIRST|last|LAST|\d+/

  c.action do |global_options,options,args|
    time = extract_time(args[0])
    planner = Syctask::TaskPlanner.new
    if options[:order]
      options[:position] ||= 0
      ordered, rest, pos = planner.order_tasks(time, options[:order].split(","),
                                               options[:position])
      puts sprintf("--> put %d task%s out of %s into new order at position %d", 
                   ordered, "#{'s' if ordered > 1}", rest, pos).color(:green)
    else
      planner.prioritize_tasks(time)
    end
  end
end

desc 'Start tracking a task'
arg_name "TASK_ID#{@general_purpose_tasks}"
command :start do |c|

  c.desc 'Show task timer'
  c.switch [:t, :timer]

  c.desc 'List currently tracked task'
  c.switch [:l, :list] 
 
  c.desc 'ID of planned task'
  c.switch [:p, :plan]

  c.action do |global_options,options,args|
    if args.empty? and not options[:l] and not options[:p]
      help_now! sprintf("%s", "no arguments and options given").color(:red)
    end
    tracker = Syctask::TaskTracker.new
    if args[0]
      if options[:plan]
        task = @planner.get_tasks(Time.now.strftime("%Y-%m-%d"),
                                  {id: args[0]})[0]
      else
        task = @service.read(global_options[:taskdir], args[0])
      end
      help_now! sprintf("%s", 
                        "no task with id #{args[0]}").color(:red) unless task
      started, stopped = tracker.start(task, options[:timer])
      if stopped
        puts sprintf("--> stopped %s",
                     "#{stopped.id} - #{stopped.title}").color(:yellow)
        puts sprintf("    %s", "#{string_for_seconds(stopped.lead_time)}").
          color(:yellow)
      end
      if started
        puts sprintf("--> started %s", 
                     "#{task.id} - #{task.title}").color(:green)
      else
        puts sprintf("--> allready started %s", 
                     "#{task.id} - #{task.title}").color(:red)
      end
     end
    if options[:list]
      task = tracker.tracked_task
      puts sprintf("%s", "--> no task tracked").color(:red) unless task
      puts sprintf("%s", "--> #{task.id} - #{task.title}").
        color(:green) if task
    end
  end
end

desc 'Stop the tracked task'
command :stop do |c|
  c.action do |global_options,options,args|
    tracker = Syctask::TaskTracker.new
    task = tracker.stop
    if task
      puts sprintf("--> stopped %s", "#{task.id} - #{task.title}").color(:green)
      puts sprintf("    %4s", "#{string_for_seconds(task.lead_time)}").
        color(:green)
     else
      puts sprintf("--> %s", "no task tracked").color(:red)
    end
  end
end

desc 'Update the task'
arg_name 'ID'
command :update do |c|
  c.desc 'Priority of the task, 1 highes priority'
  c.arg_name 'PRIO'
  c.flag [:p, :prio], :type => Integer

  c.desc 'Follow-up date'
  c.arg_name 'FOLLOW-UP'
  c.flag [:f, :follow_up]
  
  c.desc 'Due date'
  c.arg_name 'DUE'
  c.flag [:d, :due_date]

  c.desc 'Duration'
  c.arg_name 'DURATION'
  c.flag :duration, :must_match => /\d+/

  c.desc 'Description of the task'
  c.arg_name 'DESCRIPTION'
  c.flag :description

  c.desc 'Note on progress of the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.desc 'Tags that describe the task'
  c.arg_name 'TAG1,TAG2,TAG3'
  c.flag [:t, :tags], :must_match => /^\w+(?:,\w+)*/

  c.action do |global_options,options,args|
    help_now! "ID required" if args.empty?
    options[:follow_up] = extract_time(options[:f]) if options[:f]
    options[:due_date]  = extract_time(options[:d]) if options[:d]
    filter = [:tags, :description, :prio, :due_date, :follow_up, :duration, 
              :note]
    options.keep_if {|key, value| filter.find_index(key) and value != nil}

    success = @service.update(global_options[:t], args[0], options) 

    add_task_to_plan @service.read(global_options[:t], args[0]) if success

    STDOUT.puts sprintf("--> updated task %s ", 
                        args[0]).color(:green) if success
    STDOUT.puts sprintf("--> could not update task %s ", 
                        args[0]).color(:red) unless success
  end
end

desc 'Mark task as done'
arg_name 'ID'
command :done do |c|
  c.desc 'Print task after marked as done'
  c.switch [:p, :print]
  c.desc 'Print complete task'
  c.switch [:c, :complete]

  c.desc 'Final note for the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.action do |global_options,options,args|
    help_now! sprintf("%s", 
                      'ID is required').color(:red) if args.empty?
    task = @service.read(global_options[:t], args[0])
    exit_now!("Task with ID #{args[0]} does not exist") unless task
    task.done(options[:note])
    @service.save(task.dir, task)
    STDOUT.puts sprintf("--> Marked task %d as done", args[0]).color(:green)
    task.print_pretty(options[:c]) if options[:p] 
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  proceed = true

  Syctask::check_environment

  @service = Syctask::TaskService.new
  @planner = Syctask::TaskPlanner.new

  if command.name == :start and not args[0].nil? and @settings.
                                                      read_tasks[args[0].upcase]
    global[:taskdir] = Syctask::SYC_DIR
    args[0] = @settings.read_tasks[args[0].upcase].to_s
  else
    dir = File.expand_path(global[:t])
    dir += "/" + global[:p] if global[:p]
    global[:taskdir] = global[:t] = dir.squeeze("/")
  end
 
  if command.name == :new and not File.exists? global[:taskdir]
    puts sprintf("Directory %s doesn't exist!", global[:taskdir]).color(:red)
    print sprintf("%s", "Create it (Y/n)? ").color(:red)
    proceed = STDIN.gets.chomp == 'Y'
    if proceed
      FileUtils.mkdir_p global[:taskdir]
    end 
  end

  proceed
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  if exception.to_s == "exit" and exception.status == 0
    false
  else
    true
  end
end

# Extracts the time out of a time string. Accepts 'today', 'tomorrow',
# 'yesterday' or a date in the form 'YYYY-MM-DD'. Returns the date contained in 
# the time_string or if time = true in a Time object
def extract_time(time_string,time=false)
  time_string = 'today' if time_string.nil?

  if time_string.match(/\d{4}-\d{2}-\d{2}/)
    date = time_string 
    date = Time.xmlschema("#{time_string}T00:00:00") if time
  else
    timeleap = SycTimeleap::TimeLeap.new
    begin
      date = timeleap.send(time_string)
      date = date.to_s unless time
    rescue NoMethodError
      help_now! "Arguments may be 'time distances', YYYY-MM-DD or <RETURN>\n\n"+
                "time distances are:\n"+
                "* yesterday|today|tomorrow\n"+
                "* next|previous_monday|tuesday|...|sunday\n"+
                "* in|back_10_days|weeks|months|years\n"+
                "* monday|tuesday|...|sunday_in|back_1_day|week|month|year\n"+
                "Short forms are also possible:\n"+
                "* y|tod|tom\n"+
                "* n|pmo|tu|we|th|fr|sa|su\n"+
                "* i|b10d|w|m|y\n"+
                "* mo|tu|we|th|fr|sa|sui|b1d|w|m|y"
    end
  end
  date
end

# Add task to task plan
def add_task_to_plan(task)
  if task.options[:follow_up]
    @planner.add_task(task, task.options[:follow_up])
  end
  if task.options[:due_date]
    @planner.add_task(task, task.options[:due_date])
  end  
end

exit run(ARGV)
