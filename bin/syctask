#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'syctask'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/syctask` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/syctask now"
  exit 64
end

include GLI::App

program_desc 'A simple task manager'

version Syctask::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'The directory where tasks are saved to'
default_value File.expand_path('~/.tasks')
arg_name 'TASK_DIR'
flag [:t,:taskdir]

desc 'Project name where tasks are saved'
arg_name 'PROJECT'
flag [:p, :project]

desc 'Create a new task'
arg_name 'TASK_TITLE'
command :new do |c|
  c.desc 'Describe a switch to new'
  c.switch :s

  c.desc 'Priority of the task, 1 highes priority'
  c.default_value 3
  c.arg_name 'PRIO'
  c.flag [:p, :prio]

  c.desc 'Follow-up date'
  c.arg_name 'FOLLOW-UP'
  c.flag [:f, :follow_up]
  
  c.desc 'Due date'
  c.arg_name 'DUE'
  c.flag [:d, :due_date]

  c.desc 'Description of the task'
  c.arg_name 'DESCRIPTION'
  c.flag :description

  c.desc 'Note on progress of the task'
  c.arg_name 'NOTE'
  c.flag [:n, :note]

  c.desc 'Tags that describe the task'
  c.arg_name 'TAG1,TAG2,TAG3'
  c.flag [:t, :tags]  

  c.action do |global_options,options,args|
    dir = global_options[:t]
    title = args[0]
    service = Syctask::TaskService.new
    task_number = service.create(dir, options, title)
    STDOUT.puts "--> created Task with task number #{task_number}"
  end
end

desc 'Extract tasks from a file'
arg_name 'TASK_FILE'
command :scan do |c|
  c.action do |global_options,options,args|
    puts "scan command ran"
  end
end

desc 'List tasks'
command :list do |c|
  c.action do |global_options,options,args|
    puts "list command ran"
  end
end

desc 'Plan tasks for today'
command :plan do |c|
  c.action do |global_options,options,args|
    puts "plan command ran"
  end
end

desc 'Prioritize tasks'
command :prio do |c|
  c.action do |global_options,options,args|
    puts "prio command ran"
  end
end

desc 'Start and time a task'
arg_name 'TASK_NUMBER'
command :start do |c|
  c.action do |global_options,options,args|
    puts "start command ran"
  end
end

desc 'Stop the running task'
command :stop do |c|
  c.action do |global_options,options,args|
    puts "stop command ran"
  end
end

desc 'Update the task'
arg_name 'TASK_NUMBER'
command :update do |c|
  c.action do |global_options,options,args|
    puts "update command ran"
  end
end

desc 'Mark task as done'
arg_name 'TASK_NUMBER'
command :done do |c|
  c.action do |global_options,options,args|
    puts "done command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
